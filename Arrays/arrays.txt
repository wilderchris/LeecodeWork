leetcode array


1. Max Consecutive Ones
Given a binary array nums, return the maximum number of consecutive 1's in the array.

 

Example 1:

Input: nums = [1,1,0,1,1,1]
Output: 3
Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.
Example 2:

Input: nums = [1,0,1,1,0,1]
Output: 2
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.
   Show Hint #1  


class Solution {
2
    public int findMaxConsecutiveOnes(int[] nums) {
3
        int maxCount = 0;
4
    int count = 0;
5
    for (int num : nums) {
6
        if (num == 1) {
7
            count++;
8
        } else {
9
            maxCount = Math.max(maxCount, count);
10
            count = 0;
11
        }
12
    }
13
    return Math.max(maxCount, count);
14
    }
15
}

'
2. 
Find Numbers with Even Number of Digits
Given an array nums of integers, return how many of them
 contain an even number of digits.

 
Example 1:

Input: nums = [12,345,2,6,7896]
Output: 2
Explanation: 
12 contains 2 digits (even number of digits). 
345 contains 3 digits (odd number of digits). 
2 contains 1 digit (odd number of digits). 
6 contains 1 digit (odd number of digits). 
7896 contains 4 digits (even number of digits). 
Therefore only 12 and 7896 contain an even number of digits.

Example 2:

Input: nums = [555,901,482,1771]
Output: 1 
Explanation: 
Only 1771 contains an even number of digits.
 
Constraints:

1 <= nums.length <= 500
1 <= nums[i] <= 105
  

class Solution {

    public int findNumbers(int[] nums) {

        int result = 0;

        for (int i = 0; i < nums.length; i++){

            if(  (countDig(nums[i]) %2) == 0){

                result++;

            }

        }

        return result;

    }

    public int countDig(int n)  

{  

int count = 0;  

while(n != 0)  

{  

    n = n / 10;  


   count = count + 1;  

}  

return count;  

}  

}

3.
