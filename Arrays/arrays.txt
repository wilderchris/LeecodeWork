leetcode array


1. Max Consecutive Ones
Given a binary array nums, return the maximum number of consecutive 1's 'in the array.

 

Example 1:

Input: nums = [1,1,0,1,1,1]
Output: 3
Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.
Example 2:

Input: nums = [1,0,1,1,0,1]
Output: 2
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.
   Show Hint #1  


class Solution {
2
    public int findMaxConsecutiveOnes(int[] nums) {
3
        int maxCount = 0;
4
    int count = 0;
5
    for (int num : nums) {
6
        if (num == 1) {
7
            count++;
8
        } else {
9
            maxCount = Math.max(maxCount, count);
10
            count = 0;
11
        }
12
    }
13
    return Math.max(maxCount, count);
14
    }
15
}


2. 
Find Numbers with Even Number of Digits
Given an array nums of integers, return how many of them
 contain an even number of digits.

 
Example 1:

Input: nums = [12,345,2,6,7896]
Output: 2
Explanation: 
12 contains 2 digits (even number of digits). 
345 contains 3 digits (odd number of digits). 
2 contains 1 digit (odd number of digits). 
6 contains 1 digit (odd number of digits). 
7896 contains 4 digits (even number of digits). 
Therefore only 12 and 7896 contain an even number of digits.

Example 2:

Input: nums = [555,901,482,1771]
Output: 1 
Explanation: 
Only 1771 contains an even number of digits.
 
Constraints:

1 <= nums.length <= 500
1 <= nums[i] <= 105
  

class Solution {

    public int findNumbers(int[] nums) {

        int result = 0;

        for (int i = 0; i < nums.length; i++){

            if(  (countDig(nums[i]) %2) == 0){

                result++;

            }

        }

        return result;

    }

    public int countDig(int n)  

{  

int count = 0;  

while(n != 0)  

{  

    n = n / 10;  


   count = count + 1;  

}  

return count;  

}  

}

3.

Squares of a Sorted Array

Solution
Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

 

Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
Example 2:

Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.
 

Follow up: Squaring each element and sorting the new array is very trivial,
 could you find an O(n) solution using a different approach?
Java	
;

class Solution {

    public int[] sortedSquares(int[] nums) {

        int[] sqr = new int[nums.length];

        for(int i = 0;i< nums.length; i++){

            sqr[i] = nums[i] * nums[i];

        }

        Arrays.sort(sqr);

        return sqr;

    }

}

##########################

Question 4
Duplicate Zeros

Solution
Given a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right.

Note that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not return anything.

 

Example 1:

Input: arr = [1,0,2,3,0,4,5,0]
Output: [1,0,0,2,3,0,0,4]
Explanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]
Example 2:

Input: arr = [1,2,3]
Output: [1,2,3]
Explanation: After calling your function, the input array is modified to: [1,2,3]
 

Constraints:

1 <= arr.length <= 104
0 <= arr[i] <= 9
   Show Hint #1  
   Show Hint #2  
   Show Hint #3  
   Show Hint #4  
Java	

        
        
        
    }

   
}
class Solution {
    public void duplicateZeros(int[] arr) {
        
        
        int n = arr.length;
    for (int i = 0; i < n; i++) {
        if (arr[i] == 0) {
            for (int j = n - 1; j > i; j--) {
                arr[j] = arr[j - 1];
            }
            i++;
        }
    }
            
        }

        
        
        
    }

   



#########################################

